ginis  <- NULL
theils <- NULL
Var_S  <- NULL
for(i in 1:length(a)){
print(i)
assign(paste0("S",i), value = trunc(15*rbeta(n, a[i],b[i])))
assign(paste0("ln_w",i), value =
6 + r*get(paste0("S",i))  + b1*A + b2*A2 + e)
assign(paste0("w",i), value =
exp(  get(paste0("ln_w",i))  )
)
ginis[i]  <- Gini(get(paste0("w",i)))
theils[i] <- Theil(get(paste0("w",i)))
Var_S[i]  <- var(get(paste0("S",i)))
}
par(mfrow=c(2,2))
hist(w1)
hist(get(paste0("w", i)))
plot(ginis)
plot(theils)
plot(Var_S, ginis, type = "l")
#dev.off()
rm(list=ls())
####################################
list(length=10)
rm(list=ls())
n = 10
a = list(ID = 1,
idade = 0,
HC = 5,
r = .5
altruism = .5
alpha0 = .25,
alpha1 = .75,
)
wealth = function(person){
person$HC * person$r
}
rm(list=ls())
n = 10
a = list(ID = 1,
idade = 0,
HC = 5,
r = .5
altruism = .5
alpha0 = .25,
alpha1 = .75
)
wealth = function(person){
person$HC * person$r
}
####################################
rm(list=ls())
n = 10
a = list(ID = 1,
idade = 0,
HC = 5,
r = .5,
altruism = .5,
alpha0 = .25,
alpha1 = .75
)
wealth = function(person){
person$HC * person$r
}
wealth(a)
p1 = .5
p2 = .6
optim()
optim
optim
x <- 1
f <- function() x
g <- function() { x <- 0; f() }
g() # 1
x <- 1
f <- function() x
f()
g <- function() { x <- 0; { f()} }
g() # 1
x <- 2
g() # 1
a = list(ID = 1,
idade = 0,
HC = 5,
r = .5,
altruism = .5,
alpha1 = .25,
alpha2 = .75
utility = function(x1, x2){
(x1^alpha1)*(x2^alpha2)
}
)
a = list(ID = 1,
idade = 0,
HC = 5,
r = .5,
altruism = .5,
alpha1 = .25,
alpha2 = .75,
utility = function(x1, x2){
(x1^alpha1)*(x2^alpha2)
}
)
a$utility()
a$utility(1,2)
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
`+`(1, `*`(2, 3))
mean(, TRUE, x = c(1:10, NA))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is an error!"))
a$ob0 <- 1
a
rm(list=ls())
n = 10
p1 = .5
p2 = .6
a$ob0 <- 1
a = list(ID = 1,
idade = 0,
HC = 5,
r = .5,
altruism = .5,
alpha1 = .25,
alpha2 = .75,
utility = function(x1, x2){
(x1^alpha1)*(x2^alpha2)
}
)
wealth = function(person){
person$HC * person$r
}
####################################
rm(list=ls())
a$ob0 <- 1
a = list()
a$ob0 <- 1
a$sum <- function(){ob0}
a$sum
a$sum()
utility = function(x1, x2){
(x1^person$alpha1)*(x2^person$alpha2)
}
utility_C = function(x1, x2){
(x1^person$alpha1)*(x2^person$alpha2)
}
person = a
utility_C = function(x1, x2){
(x1^person$alpha1)*(x2^person$alpha2)
}
utility_C(1,1)
utility_C(2,2)
person$alpha1
person
a = list(ID = 1,
idade = 0,
HC = 5,
r = .5,
altruism = .5,
alpha1 = .25,
alpha2 = .75
)
person = a
person
utility_C(2,2)
utility_C(2,3)
rm(list=ls())
n = 10
p1 = .5
p2 = .6
a = list(ID = 1,
idade = 0,
HC = 5,
r = .5,
altruism = .5,
alpha1 = .25,
alpha2 = .75
)
utility_C = function(x1, x2){
(x1^person$alpha1)*(x2^person$alpha2)
}
wealth = function(){
person$HC * person$r
}
U_C = function(x1, x2){
(x1^person$alpha1)*(x2^person$alpha2)
}
optim
lagrange(x1, x2, lambda){
U_C(x1, x2) + lambda*(wealth() - p1*x1 - p2*x2)
}
lagrange <- function(x1, x2, lambda){
U_C(x1, x2) + lambda*(wealth() - p1*x1 - p2*x2)
}
lagrange(1,2,1)
rm(list=ls())
n = 10
p1 = .5
p2 = .6
a = list(ID = 1,
idade = 0,
HC = 5,
r = .5,
altruism = .5,
alpha1 = .25,
alpha2 = .75
)
b = list(ID = 2,
idade = 0,
HC = 6,
r = .5,
altruism = .6,
alpha1 = .45,
alpha2 = .55
)
person = a
U_C = function(x1, x2){
(x1^person$alpha1)*(x2^person$alpha2)
}
wealth = function(){
person$HC * person$r
}
lagrange <- function(x1, x2, lambda){
U_C(x1, x2) + lambda*(wealth() - p1*x1 - p2*x2)
}
lagrange(1,2,1)
optim(c(0,0,0), lagrange)
optim
optim(c(1,1,0), lagrange)
U_C = function(x1, x2){
(x1^person$alpha1)*(x2^person$alpha2)
}
U_C(1,1)
lagrange <- function(x1, x2, lambda){
U_C(x1, x2) + lambda*(wealth() - p1*x1 - p2*x2)
}
lagrange(1,1,1)
optim
optim(par=c(1,1,0), fn=lagrange)
lagrange <- function(x1, x2, lambda){
x1 <- x1
x2 <- x2
lambda <- lambda
U_C(x1, x2) + lambda*(wealth() - p1*x1 - p2*x2)
}
lagrange(1,2,2)
optim(par=c(1,1,0), fn=lagrange)
?optim
lagrange <- function(x1, x2, lambda){
(x1^person$alpha1)*(x2^person$alpha2) + lambda*((person$HC * person$r) - p1*x1 - p2*x2)
}
lagrange(1,1,1)
?optim(par=c(1,1,0), fn=lagrange)
optim(par=c(1,1,0), fn=lagrange)
optim(par=c(1,1,1), fn=lagrange)
c(1,1,1)
nlm(f=lagrange,p=c(1,1,1))
nlm(f=lagrange(1,1,1),p=c(1,1,1))
lagrange <- function(x1, x2, lambda){
(x1^person$alpha1)*(x2^person$alpha2) + lambda*((person$HC * person$r) - p1*x1 - p2*x2)
}
lagrange <- function(x1, lambda){
(x1^person$alpha1) + lambda*((person$HC * person$r) - p1*x1)
}
nlm(f=lagrange,p=c(1,1,))
nlm(f=lagrange,p=c(1,1))
lagrange <- function(x1){
(x1^person$alpha1) + ((person$HC * person$r) - p1*x1)
}
nlm(f=lagrange,p=c(1))
lagrange <- function(x1,lambda){
(x1^person$alpha1) + lambda*((person$HC * person$r) - p1*x1)
}
lagrange(1,1)
lagrange(1,2)
lagrange(1,3)
lagrange(2,3)
nlm(f=lagrange,p=c(1,1))
lagrange <- function(x1,lambda){
(x1^person$alpha1) + lambda*((person$HC * person$r) - p1*x1)
}
nlm(f=lagrange,p=c(1,1))
nlm(f=lagrange,p=c(x1=1,lamda=1))
nlm(f=lagrange,p=c(x1=1,lambda=1))
nlm(f=lagrange,x1=1,lambda=1)
nlm(f=lagrange,p = 1,lambda=1)
nlm(f=lagrange,p = 1)
rm(list=ls)()
rm(list=ls())
rm(list=ls())
library(XML)
library(RCurl)
curl <- getCurlHandle()
curlSetOpt(cookiefile='cookies.txt', curl=curl, followlocation = TRUE)
options(
RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")),
stringAsFactors = F
)
base <- "http://cnes.datasus.gov.br/Lista_Es_Nome_Por_Estado_Municipio.asp"
base <- htmlParse(base)
UFs     <- xpathSApply(base, "//select[@name = 'ComboEstado']/option", xmlValue)
UF_cods <- xpathSApply(base, "//select[@name = 'ComboEstado']/option", xmlGetAttr, "value")
UFs     <- UFs[-1]
UF_cods <- UF_cods[-1]
url_base <- "http://cnes.datasus.gov.br/Lista_Es_Nome_Por_Estado_Municipio.asp?VEstado="
banco_de_dados <- NULL
for(i in 1:length(UFs)){
print(UFs[i])
uf_cod = UF_cods[i]
url <- paste0(url_base, uf_cod)
url <- htmlParse(url)
munics     <- xpathSApply(url, "//select[@name = 'ComboMunicipio']/option", xmlValue)
munic_cods <- xpathSApply(url, "//select[@name = 'ComboMunicipio']/option", xmlGetAttr, "value")
munics     <- munics[-1]
munic_cods <- munic_cods[-1]
for(j in 1:length(munics)){
#Sys.sleep(1)
#j = 1
print(paste("----", munics[j]))
print(paste("---------- Pagina 1"))
dados <- list()
url <- paste0(url_base, uf_cod, "&VMun=", munic_cods[j])
url <- getURL(url, curl = curl)
existeProximaPag <- grep("Navegacao=Proxima&Vbusca=", url)
url <- htmlParse(url)
dados_tmp <- try(readHTMLTable(url, header = F, which = 6), silent=T)
if(!class(dados_tmp)=="try-error"){
enderecos <- xpathSApply(url, "//table/*/*/*/a", xmlGetAttr, "href")
ID_unidade <- gsub("[[:alpha:]]|[[:punct:]]", "", enderecos)
geoDados <- paste0("http://cnes.datasus.gov.br/geo.asp?VUnidade=",ID_unidade)
dados_tmp$enderecos  <- paste0("http://cnes.datasus.gov.br/",enderecos)
dados_tmp$ID_unidade <- ID_unidade
dados_tmp$geoDados   <- geoDados
dados[[1]] <- dados_tmp
}else{
print("-------- TABELA VAZIA!!!!!! --------")
next
}
if(length(existeProximaPag)>0){
k = 2
repeat{
print(paste("---------- Pagina", k))
proxima <- "http://cnes.datasus.gov.br/Lista_Es_Nome_Por_Estado_Municipio.asp?Navegacao=Proxima&Vbusca="
proxima <- htmlParse(getURL(proxima, curl = curl))
dados_tmp <- try(readHTMLTable(proxima, header = F, which = 6), silent=T)
if(class(dados_tmp)=="try-error"){
print("-------- TABELA VAZIA!!!!!! --------")
break
}
if(!identical(dados_tmp, dados[[k-1]]) ){
dados[[k]] <- dados_tmp
}else{
break
}
k = k + 1
}
}
dados <- Reduce(rbind.data.frame, dados)
dados$munic <- munics[j]
dados$UF    <- UFs[i]
banco_de_dados <- rbind.data.frame(banco_de_dados, dados)
}
}
View(banco_de_dados)
banco_de_dados[, V3]
banco_de_dados[, V3]
library(data.table)
library(ggmap)
a <- readHTMLTable("http://cnes.datasus.gov.br/Mod_Conjunto.asp?VCo_Unidade=1200406064124")
a
rm(list=ls())
library(XML)
library(RCurl)
curl <- getCurlHandle()
curlSetOpt(cookiefile='cookies.txt', curl=curl, followlocation = TRUE)
options(
RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")),
stringAsFactors = F
)
base <- "http://cnes.datasus.gov.br/Lista_Es_Nome_Por_Estado_Municipio.asp"
base <- htmlParse(base)
UFs     <- xpathSApply(base, "//select[@name = 'ComboEstado']/option", xmlValue)
UF_cods <- xpathSApply(base, "//select[@name = 'ComboEstado']/option", xmlGetAttr, "value")
UFs     <- UFs[-1]
UF_cods <- UF_cods[-1]
url_base <- "http://cnes.datasus.gov.br/Lista_Es_Nome_Por_Estado_Municipio.asp?VEstado="
banco_de_dados <- NULL
for(i in 1:length(UFs)){
print(UFs[i])
uf_cod = UF_cods[i]
url <- paste0(url_base, uf_cod)
url <- htmlParse(url)
munics     <- xpathSApply(url, "//select[@name = 'ComboMunicipio']/option", xmlValue)
munic_cods <- xpathSApply(url, "//select[@name = 'ComboMunicipio']/option", xmlGetAttr, "value")
munics     <- munics[-1]
munic_cods <- munic_cods[-1]
for(j in 1:length(munics)){
#Sys.sleep(1)
#j = 1
print(paste("----", munics[j]))
print(paste("---------- Pagina 1"))
dados <- list()
url <- paste0(url_base, uf_cod, "&VMun=", munic_cods[j])
url <- getURL(url, curl = curl)
existeProximaPag <- grep("Navegacao=Proxima&Vbusca=", url)
url <- htmlParse(url)
dados_tmp <- try(readHTMLTable(url, header = F, which = 6), silent=T)
if(!class(dados_tmp)=="try-error"){
enderecos <- xpathSApply(url, "//table/*/*/*/a", xmlGetAttr, "href")
ID_unidade <- gsub("[[:alpha:]]|[[:punct:]]", "", enderecos)
geoDados <- paste0("http://cnes.datasus.gov.br/geo.asp?VUnidade=",ID_unidade)
dados_tmp$enderecos  <- paste0("http://cnes.datasus.gov.br/",enderecos)
dados_tmp$ID_unidade <- ID_unidade
dados_tmp$geoDados   <- geoDados
dados[[1]] <- dados_tmp
}else{
print("-------- TABELA VAZIA!!!!!! --------")
next
}
if(length(existeProximaPag)>0){
k = 2
repeat{
print(paste("---------- Pagina", k))
proxima <- "http://cnes.datasus.gov.br/Lista_Es_Nome_Por_Estado_Municipio.asp?Navegacao=Proxima&Vbusca="
proxima <- htmlParse(getURL(proxima, curl = curl))
dados_tmp <- try(readHTMLTable(proxima, header = F, which = 6), silent=T)
if(class(dados_tmp)=="try-error"){
print("-------- TABELA VAZIA!!!!!! --------")
break
}
if(!identical(dados_tmp, dados[[k-1]]) ){
dados[[k]] <- dados_tmp
}else{
break
}
k = k + 1
}
}
dados <- Reduce(rbind.data.frame, dados)
dados$munic <- munics[j]
dados$UF    <- UFs[i]
banco_de_dados <- rbind.data.frame(banco_de_dados, dados)
}
}
shiny::runApp('C:/Users/Hellen/Desktop/MapaImoveis')
a <- cumSum(rnorm(100))
a <- cumsum(rnorm(100))
a
plot(a)
plot(a)
b <- cumsum(rnorm(100))
plot(a, type="l", col="blue"); par(new=T);plot(b,type="l",col="red")
library(ggmap)
geocode("Av Luciano Gualberto, 315, Cidade Universitaria, Sao Paulo, SP")
rm(list=ls());gc()
########################################################
# Carregando pacotes e definindo opcoes
options(scipen=999,
stringsAsFactors=FALSE)
library(data.table)
library(descr)
#######################################################
# Definindo diretorio de trabalho
setwd("C:/users/hellen/Dropbox/Posts/Post - Perfil Manifestacoes/Censo 2010")
########################################################
# Abrindo os bancos
UF <- c("RJ", "MG", "RS", "PE", "CE", "BA", "DF")
censos <- fread("censo2010_SP2-RM_pes.csv")
for(uf in UF){
print(uf)
censos <- rbind(censos,
fread(paste0("censo2010_", uf, "_pes.csv"))
)
}
#######################################################
# Recodificacao de variaveis
# idade
censos[ , faixas_idade_2013 := cut(idade,
breaks = c(0, 13, 24, 29, 39, 130)
)
]
censos[ , faixas_idade_2015 := cut(idade,
breaks = c(0, 11, 20, 25, 35, 50, 130)
)
]
# Renda individual
censos[ , faixas_rendaInd_SMs := cut(rendaTotalSM,
breaks = c(0, 2, 5, 10, 10000)
)
]
# Renda domiciliar per capita
censos[ , faixas_rendaDom_SMs := cut(rendaDomSm,
breaks = c(0, 2, 5, 10, 10000)
)
]
########################################################
# Analise para as 7 capitais + DF
# sexo
censos[idade >= 14, freq(sexo, peso)]
# idade
censos[idade >= 14, freq(faixas_idade_2013, peso)]
# educacao
censos[idade >= 14, freq(educ_rec, peso)]
censos[UF == "SP2-RM" & idade >= 12, freq(educ_rec, peso)]
